@page "/Other/ChatRoom"

@using DataAcesss.Data
@using DataAcesss.Repositories.Interfaces
@using Microsoft.AspNetCore.Identity
@using Models.ViewModels
@using NLog
@using SimpleBet.Helpers

@inject UserManager<ApplicationUser> _UserManager
@inject IChatRepository ChatRepository
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<PageTitle>@SITE_NAME</PageTitle>


<SfAutoComplete TValue="string" @ref="AutoCompleteAuthor" TItem="string" Placeholder="Pretraži autora posta" Width="300px" DataSource="Model.AuthorNameUnique">
    <AutoCompleteFieldSettings Value="AuthorNameUnique" />
    <AutoCompleteEvents TValue="string" TItem="string" ValueChange="FilterAuthors"></AutoCompleteEvents>
</SfAutoComplete>

<div class="dropdown-sort">
    <SfDropDownList Width="150px" TValue="int" TItem="PostSortDropDown" Placeholder="Sortiraj" @bind-Value="Model.SelectedValue" DataSource="Model.PostSortDropDownList">
        <DropDownListFieldSettings Value="SortTypeValue" Text="SortTypeText"></DropDownListFieldSettings>
        <DropDownListEvents TItem="PostSortDropDown" TValue="int" ValueChange="SortPosts"></DropDownListEvents>
    </SfDropDownList>
</div>

<br class="clear" />

<button class="btn btn-primary mt-3" @onclick="()=>ShowNewPost = !ShowNewPost">Novi post</button>

@if (ShowNewPost)
{
    <EditForm Model="NewPost" OnValidSubmit="SavePost">
        <DataAnnotationsValidator />
        <div class="container mb-4 p-0">
            <div class="px-4 mt-4 bg-light rounded">
                <i class="fa fa-times float-end mb-2 mt-2 text-muted" @onclick="()=>ShowNewPost = false"></i>
                <SfTextBox CssClass="mt-0" Placeholder="Naslov posta" @bind-Value="NewPost.Title" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <SfTextBox Multiline=true Placeholder="Poruka" @bind-Value="NewPost.Message" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <button type="submit" class="btn btn-primary mt-3 mb-4">Objavi</button>
            </div>
        </div>
    </EditForm>
}

@foreach (ChatPostVM post in Model.ChatPostsFiltered)
{
    <div class="container mt-3 px-0">
        <div class="p-2 px-3 bg-success rounded text-break" style="--bs-bg-opacity: .3;">
            @if (post.EditPostVisible)
            {
                <i class="fa fa-times float-end mb-2 mt-2 text-muted" @onclick="()=>post.EditPostVisible = !post.EditPostVisible"></i>
                <SfTextBox CssClass="mt-0" Placeholder="Naslov posta" @bind-Value="Model.EditPostTitle" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <SfTextBox Multiline=true Placeholder="Poruka" @bind-Value="Model.EditPostMessage" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <button class="btn btn-primary mt-3 mb-4" @onclick="()=>SaveEditPost(post.PostId, Model.EditPostTitle, Model.EditPostMessage)">Objavi</button>
            }
            else
            {
                <h4>@post.Title</h4>
                <p class="mb-3">@post.Message</p>
                <div class="footer-wrapper">
                    <div class="d-flex">
                        <div>
                            <i class="fa fa-thumbs-up text-primary like-icon" title="Sviđa mi se" @onclick="() => LikePost(post.PostId)"></i>
                            <span class="mx-1 text-secondary like-icon">@post.TotalLikes</span>
                        </div>
                        <div>
                            <i class="fa fa-thumbs-down text-danger dislike-icon" title="Ne sviđa mi se" @onclick="() => DislikePost(post.PostId)"></i>
                            <span class="mx-1 text-secondary dislike-icon">@post.TotalDislikes</span>
                        </div>
                    </div>
                    <div class="m-0">
                        @post.PostFooter
                    </div>
                </div>
            }
        </div>
        <div class="buttons-main-container">
            @if (Model.CurrentUserId == post.AuthorId)
            {
                <div>
                    <button type="button" class="btn btn-link p-0 px-1" @onclick="()=>DeletePost(post.PostId)">Obriši post</button>
                    <button type="button" class="btn btn-link p-0" @onclick="()=>EditPost(post.PostId)">Uredi post</button>
                </div>
            }
            <div>
                <button type="button" class="btn btn-link p-0 px-1" @onclick="()=>ShowNewReply(post.PostId)">Odgovori</button>
                <button type="button" class="btn btn-link p-0" @onclick="()=>ShowReplies(post.PostId)">Prikaži komentare</button>
                <span class="total-replies">(@post.TotalReplies)</span>
            </div>
        </div>
    </div>

    @if (post.NewReplyVisible)
    {
        <div class="container px-0 mb-4">
            <div class="px-4 bg-light rounded">
                <i class="fa fa-times float-end mb-2 mt-2 text-muted" @onclick="()=>ShowNewReply(post.PostId)"></i>
                <SfTextBox Multiline=true CssClass="mt-0" Placeholder="Poruka" @bind-Value="NewReply.Message" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <button class="btn btn-primary mt-3 mb-4" @onclick="()=>SaveReply(post.PostId)">Objavi</button>
            </div>
        </div>
    }

    @if (post.AllRepliesVisible)
    {
        @foreach (ChatReplyVM reply in Model.ChatReplies)
        {
            @if (reply.PostId == post.PostId)
            {
                <div class="container mt-2">
                    <div class="mx-3 p-2 bg-warning rounded text-break" style="--bs-bg-opacity: .3;">
                        @if (reply.EditReplyVisible)
                        {
                            <i class="fa fa-times float-end mb-2 mt-2 text-muted" @onclick="()=>reply.EditReplyVisible = !reply.EditReplyVisible"></i>
                            <SfTextBox Multiline=true CssClass="mt-0" Placeholder="Poruka" @bind-Value="Model.EditReplyMessage" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                            <button class="btn btn-primary mt-3 mb-2" @onclick="()=>SaveEditReply(reply.ReplyId, Model.EditReplyMessage)">Objavi</button>
                        }
                        else
                        {
                            <p>@reply.Message</p>
                            <div class="footer-wrapper">
                                <div class="m-0">
                                    @reply.ReplyFooter
                                </div>
                            </div>
                            @if (Model.CurrentUserId == reply.AuthorId)
                            {
                                <button type="button" class="btn btn-link p-0" @onclick="()=>DeleteReply(reply.ReplyId, post.PostId)">Obriši</button>
                                <button type="button" class="btn btn-link p-0" @onclick="()=>EditReply(reply.ReplyId)">Uredi</button>
                            }
                        }
                    </div>
                </div>
            }
        }
    }
}

@if (currentPostNumber < Model.ChatPosts.Count())
{
    <button type="button" class="btn btn-success mt-2 mb-4" @onclick="LoadMorePosts"><span class="oi oi-arrow-thick-bottom"></span> Učitaj još postova</button>
}

<div class="counter-container rounded mt-2 bg-info" style="--bs-bg-opacity: .15;">
    <div class="float-end">
        Učitano postova: @currentPostNumber/@Model.ChatPosts.Count()
    </div>
</div>

@code {
    private const string SITE_NAME = "ChatRoom";
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private const int postRangeToDisplay = 50;
    private int currentPostNumber = postRangeToDisplay;
    public bool ShowNewPost { get; set; } = false;
    public ChatRoomVM Model { get; set; } = new ChatRoomVM();
    public ChatPostVM NewPost { get; set; } = new ChatPostVM();
    public ChatReplyVM NewReply { get; set; } = new ChatReplyVM();
    SfAutoComplete<string, string> AutoCompleteAuthor;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateTask;
            ApplicationUser user = await _UserManager.GetUserAsync(authState.User);

            Model.ChatPosts = await ChatRepository.GetAllPostsAsync();
            Model.ChatPostsFiltered = Model.ChatPosts.Take(currentPostNumber).ToList();
            Model.ChatReplies = await ChatRepository.GetAllRepliesAsync();
            Model.CurrentUserId = user.Id;
            Model.PostSortDropDownList = Model.InitializeDropDown();
            Model.AuthorNameUnique = Model.ChatPosts.Select(c => c.AuthorName).Distinct().ToList();

            // Number of currently loaded posts can't be greater then total number of posts.
            if (currentPostNumber > Model.ChatPosts.Count())
            {
                currentPostNumber = Model.ChatPosts.Count();
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public async Task SavePost()
    {
        try
        {
            var authState = await authenticationStateTask;
            ApplicationUser user = await _UserManager.GetUserAsync(authState.User);
            NewPost.AuthorId = user.Id;

            bool success = await ChatRepository.AddPostAsync(NewPost);
            await JsRuntime.ToastrSuccess("Novi post objavljen.");

            if (success)
            {
                currentPostNumber++;
                ShowNewPost = false;
                NewPost.Title = "";
                NewPost.Message = "";
                Model.ChatPosts = await ChatRepository.GetAllPostsAsync();
                Model.ChatPostsFiltered = Model.ChatPosts.Take(currentPostNumber).ToList();
                Model.AuthorNameUnique = Model.ChatPosts.Select(c => c.AuthorName).Distinct().ToList();

                // After save and refresh, filter author again.
                string value = AutoCompleteAuthor.Value;
                if (!String.IsNullOrWhiteSpace(value))
                    Model.ChatPostsFiltered = Model.ChatPosts.Where(c => c.AuthorName == value).ToList();
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public void EditPost(int postId)
    {
        Model.EditPostTitle = Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().Title;
        Model.EditPostMessage = Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().Message;
        Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().EditPostVisible = !Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().EditPostVisible;
    }

    public async Task SaveEditPost(int postId, string title, string message)
    {
        if (String.IsNullOrWhiteSpace(title) || String.IsNullOrWhiteSpace(message))
        {
            await JsRuntime.ToastrWarning("Naslov i poruka posta moraju biti popunjeni!");
            return;
        }

        try
        {
            int rowsUpdated = await ChatRepository.UpdatePostAsync(postId, title, message);

            if (rowsUpdated > 0)
            {
                Model.ChatPostsFiltered = Model.ChatPosts = await ChatRepository.GetAllPostsAsync();
                Model.AuthorNameUnique = Model.ChatPosts.Select(c => c.AuthorName).Distinct().ToList();
                Model.EditPostTitle = "";
                Model.EditPostMessage = "";

                // After edit and refresh, filter author again.
                string value = AutoCompleteAuthor.Value;
                if (!String.IsNullOrWhiteSpace(value))
                    Model.ChatPostsFiltered = Model.ChatPosts.Where(c => c.AuthorName == value).ToList();
            }
            else
            {
                await JsRuntime.ToastrWarning("Post nije ažuriran.");
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public async Task DeletePost(int postId)
    {
        try
        {
            bool success = await ChatRepository.DeletePostAsync(postId);

            if (success)
            {
                currentPostNumber--;
                Model.ChatPosts = await ChatRepository.GetAllPostsAsync();
                Model.ChatPostsFiltered = Model.ChatPosts.Take(currentPostNumber).ToList();
                Model.AuthorNameUnique = Model.ChatPosts.Select(c => c.AuthorName).Distinct().ToList();

                // After delete and refresh, filter author again.
                string value = AutoCompleteAuthor.Value;
                if (!String.IsNullOrWhiteSpace(value))
                    Model.ChatPostsFiltered = Model.ChatPosts.Where(c => c.AuthorName == value).ToList();

                await JsRuntime.ToastrSuccess("Vaš post je obrisan.");
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public async Task LikePost(int postId)
    {
        try
        {
            var authState = await authenticationStateTask;
            ApplicationUser user = await _UserManager.GetUserAsync(authState.User);

            int addLike = await ChatRepository.LikePostAsync(postId, user.Id);
            Model.ChatPosts.Where(p => p.PostId == postId).FirstOrDefault().TotalLikes += addLike;
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public async Task DislikePost(int postId)
    {
        try
        {
            var authState = await authenticationStateTask;
            ApplicationUser user = await _UserManager.GetUserAsync(authState.User);

            int addDislike = await ChatRepository.DislikePostAsync(postId, user.Id);
            Model.ChatPosts.Where(p => p.PostId == postId).FirstOrDefault().TotalDislikes += addDislike;

        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public void ShowNewReply(int postId)
    {
        NewReply.Message = "";
        Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().NewReplyVisible = !Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().NewReplyVisible;
    }

    public void ShowReplies(int postId)
    {
        Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().AllRepliesVisible = !Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().AllRepliesVisible;
    }

    public async Task SaveReply(int postId)
    {
        try
        {
            var authState = await authenticationStateTask;
            ApplicationUser user = await _UserManager.GetUserAsync(authState.User);
            NewReply.AuthorId = user.Id;
            NewReply.PostId = postId;

            bool success = await ChatRepository.AddReplyAsync(NewReply);

            if (success)
            {
                Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().NewReplyVisible = false;
                Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().AllRepliesVisible = true;
                Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().TotalReplies += 1;
                Model.ChatReplies = await ChatRepository.GetAllRepliesAsync();
                NewReply.Message = "";
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public void EditReply(int replyId)
    {
        Model.EditReplyMessage = Model.ChatReplies.Where(c => c.ReplyId == replyId).FirstOrDefault().Message;
        Model.ChatReplies.Where(c => c.ReplyId == replyId).FirstOrDefault().EditReplyVisible = !Model.ChatReplies.Where(c => c.ReplyId == replyId).FirstOrDefault().EditReplyVisible;
    }

    public async Task SaveEditReply(int replyId, string message)
    {
        try
        {
            int rowsUpdated = await ChatRepository.UpdateReplyAsync(replyId, message);

            if (rowsUpdated > 0)
            {
                Model.ChatReplies = await ChatRepository.GetAllRepliesAsync();
                Model.EditReplyMessage = "";
            }
            else
            {
                await JsRuntime.ToastrWarning("Komentar nije ažuriran.");
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public async Task DeleteReply(int replyId, int postId)
    {
        try
        {
            bool success = await ChatRepository.DeleteReplyAsync(replyId);

            if (success)
            {
                Model.ChatReplies = await ChatRepository.GetAllRepliesAsync();
                Model.ChatPosts.Where(c => c.PostId == postId).FirstOrDefault().TotalReplies -= 1;
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public async Task SortPosts(ChangeEventArgs<int, PostSortDropDown> args)
    {
        try
        {
            switch (args.ItemData.SortTypeValue)
            {
                case 1:
                    Model.ChatPosts = Model.ChatPosts.OrderByDescending(c => c.PostDateTime).ToList();
                    break;
                case 2:
                    Model.ChatPosts = Model.ChatPosts.OrderByDescending(c => c.TotalLikes).ToList();
                    break;
                case 3:
                    Model.ChatPosts = Model.ChatPosts.OrderByDescending(c => c.TotalDislikes).ToList();
                    break;
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }

    public void LoadMorePosts()
    {
        currentPostNumber += postRangeToDisplay;
        Model.ChatPostsFiltered = Model.ChatPosts.Take(currentPostNumber).ToList();

        if (Model.ChatPosts.Count() < currentPostNumber)
            currentPostNumber = Model.ChatPosts.Count();

        StateHasChanged();
    }

    public void FilterAuthors(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        if (args.Value != null)
            Model.ChatPostsFiltered = Model.ChatPosts.Where(c => c.AuthorName == args.Value).ToList();
        else
            Model.ChatPostsFiltered = Model.ChatPosts;
    }
}
