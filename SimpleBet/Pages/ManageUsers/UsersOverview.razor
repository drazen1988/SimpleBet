@page "/ManageUsers/UsersOverview"

@using DataAcesss.Data
@using DataAcesss.Repositories.Interfaces
@using Microsoft.AspNetCore.Identity
@using Models.ViewModels
@using SimpleBet.Helpers
@using IdentityPasswordGenerator;

@inject IUserRepository UserRepository
@inject IClanRepository ClanRepository
@inject IMailRepository MailRepository
@inject UserManager<ApplicationUser> _UserManager
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Pregled korisnika</PageTitle>

<div id="container">
    <SfSpinner @bind-Visible="@SpinnerVisible" Size="50"></SfSpinner>
</div>

<SfGrid @ref="GridUsers" DataSource="UserList" AllowFiltering="true" AllowPaging="true" Toolbar="@(new List<string>() { "Edit", "Delete", "Update", "Cancel" })">
    <GridEvents OnActionBegin="OnActionBegin" TValue="UsersOverviewVM"></GridEvents>
    <GridPageSettings PageSize="12"></GridPageSettings>
    <GridEditSettings AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal" ShowDeleteConfirmDialog="true"></GridEditSettings>
    <GridColumns>
        <GridColumn Field=@nameof(UsersOverviewVM.Id) IsPrimaryKey=true Visible=false></GridColumn>
        <GridColumn Field=@nameof(UsersOverviewVM.UserName) TextAlign="TextAlign.Center" Width="150"></GridColumn>
        <GridColumn Field=@nameof(UsersOverviewVM.FullName) AllowEditing="false" TextAlign="TextAlign.Center" Width="150"></GridColumn>
        <GridColumn Field=@nameof(UsersOverviewVM.Email) TextAlign="TextAlign.Center" Width="150"></GridColumn>
        <GridColumn Field=@nameof(UsersOverviewVM.ClanName) TextAlign="TextAlign.Center" Width="150" EditType="EditType.DropDownEdit">
            <EditTemplate>
                <SfDropDownList Width="250px" TValue="int" TItem="ClanDropDown" @bind-Value="@((context as UsersOverviewVM).ClanId)" DataSource="ClanDropDownList">
                    <DropDownListFieldSettings Value="ClanId" Text="ClanName"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn Width="180" AllowFiltering="false">
            <Template>
                @{
                    var user = (context as UsersOverviewVM);
                }
                <button class="btn btn-primary" @onclick="()=>ResetPassword(user)">Resetiraj lozinku</button>
            </Template>
        </GridColumn>
    </GridColumns>
    <GridTemplates>
        <EmptyRecordTemplate>
            <div class="text-center">
                <span>Nema podataka za prikaz.</span>
            </div>
        </EmptyRecordTemplate>
    </GridTemplates>
</SfGrid>


@code {
    private const string SITE_NAME = "UsersOverview";
    private bool SpinnerVisible { get; set; } = false;
    public List<UsersOverviewVM> UserList { get; set; } = new List<UsersOverviewVM>();
    public List<ClanDropDown> ClanDropDownList { get; set; }
    SfGrid<UsersOverviewVM> GridUsers;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                this.SpinnerVisible = true;
                await Task.Delay(1);
                UserList = await UserRepository.GetUsersAsync();
                ClanDropDownList = await ClanRepository.GetClansDropDownAsync();
                this.SpinnerVisible = false;
                StateHasChanged();
            }
            catch (Exception e)
            {
                await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
            }
        }
    }

    public async void OnActionBegin(ActionEventArgs<UsersOverviewVM> Args)
    {
        if (Args.RequestType.ToString() == "Delete")
        {
            try
            {
                ApplicationUser user = await _UserManager.FindByIdAsync(Args.Data.Id);

                if (user != null)
                {
                    var result = await _UserManager.DeleteAsync(user);

                    if (result.Succeeded)
                    {
                        await JsRuntime.ToastrSuccess("Korisnik je uspješno obrisan.");
                    }
                    else
                    {
                        await JsRuntime.ToastrWarning("Korisnik nije obrisan.");
                    }
                }
                else
                {
                    await JsRuntime.ToastrWarning("Korisnik nije pronađen u bazi.");
                }
            }
            catch (Exception e)
            {
                await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
            }
        }

        if (Args.RequestType.ToString() == "Save")
        {
            try
            {
                ApplicationUser user = await _UserManager.FindByIdAsync(Args.Data.Id);

                if (user != null)
                {
                    user.ClanId = Args.Data.ClanId;
                    user.Email = Args.Data.Email;
                    user.UserName = Args.Data.UserName;

                    var result = await _UserManager.UpdateAsync(user);

                    if (result.Succeeded)
                    {
                        UserList = await UserRepository.GetUsersAsync();
                        await GridUsers.Refresh();
                        await JsRuntime.ToastrSuccess("Korisnik je uspješno ažuriran.");
                    }
                    else
                    {
                        await JsRuntime.ToastrInfo("Nije ažuriran nijedan redak.");
                    }
                }
            }
            catch (Exception e)
            {
                await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
            }
        }
    }

    public async Task ResetPassword(UsersOverviewVM val)
    {
        try
        {
            // Third party password generator.
            var passwordGenerator = new PasswordGenerator();
            var options = new PasswordOptions();
            options.RequiredLength = 8;
            options.RequireNonAlphanumeric = false;
            options.RequireUppercase = true;
            var password = passwordGenerator.GeneratePassword(options);

            // Get identity user and reset current password.
            ApplicationUser user = await UserRepository.GetUserByNameAsync(val.UserName);
            var code = await _UserManager.GeneratePasswordResetTokenAsync(user);
            var result = await _UserManager.ResetPasswordAsync(user, code, password);

            if (!result.Succeeded)
            {
                foreach (var error in result.Errors)
                {
                    await JsRuntime.ToastrWarning(error.Description, "Lozinka nije promijenjena");
                    return;
                }
            }

            // After password has been reset, send it to user via mail.
            bool mailSent = await MailRepository.SendResetPasswordAsync(val.UserName, password, val.FirstName, val.Email);

            if (mailSent)
            {
                await JsRuntime.ToastrSuccess("Nova lozinka je uspješno generirana i poslana korisniku na mail.");
            }
            else
            {
                await JsRuntime.ToastrError("Mail nije poslan!", "Greška");
                Exception e = new Exception("Dogodila se greška prilikom slanja maila.");
                await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(ExceptionHelper.LogAndDisplayErrorMessage(e, SITE_NAME));
        }
    }
}
