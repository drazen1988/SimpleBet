@page "/Account/ChangePassword"

@using DataAcesss.Data
@using Microsoft.AspNetCore.Identity
@using Models.ViewModels
@using NLog
@using SimpleBet.Helpers

@inject UserManager<ApplicationUser> _UserManager
@inject NavigationManager _NavManager
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<PageTitle>Promijeni lozinku</PageTitle>

<div class="p-3 mb-2 bg-light rounded">
    <p class="mb-2">Lozinka mora sadržavati minimalno 8 znakova.</p>
    <p class="m-0">Lozinka mora sadržavati minimalno jedno veliko slovo.</p>
</div>

<EditForm Model="Model" OnValidSubmit="ChangeUserPassword">
    <DataAnnotationsValidator />
    <SfTextBox Placeholder="Stara lozinka" CssClass="mb-2" Type="InputType.Password" @bind-Value="Model.CurrentPassword" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
    <br />
    <SfTextBox Placeholder="Nova lozinka" CssClass="mb-2" Type="InputType.Password" @bind-Value="Model.NewPassword" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
    <br />
    <SfTextBox Placeholder="Potvrdi lozinku" CssClass="mb-2" Type="InputType.Password" @bind-Value="Model.ConfirmPassword" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
    <br />
    <br />
    <button type="submit" class="btn btn-primary">Promijeni lozinku</button>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public ChangePasswordVM Model = new ChangePasswordVM();

    private async void ChangeUserPassword()
    {
        try
        {
            if (Model.NewPassword != Model.ConfirmPassword)
            {
                await JsRuntime.ToastrWarning("Polja Nova lozinka i Potvrdi lozinku se ne podudaraju.");
                return;
            }

            if (Model.CurrentPassword == Model.NewPassword)
            {
                await JsRuntime.ToastrWarning("Stara lozinka i nova lozinka su jednake.");
                return;
            }

            var authState = await authenticationStateTask;
            ApplicationUser user = await _UserManager.GetUserAsync(authState.User);

            if (user == null)
            {
                _NavManager.NavigateTo("/");
            }

            var result = await _UserManager.ChangePasswordAsync(user, Model.CurrentPassword, Model.NewPassword);

            if (!result.Succeeded)
            {
                foreach (var error in result.Errors)
                {
                    await JsRuntime.ToastrWarning(error.Description, "Lozinka nije promijenjena");
                    return;
                }
            }

            await JsRuntime.ToastrSuccess("Lozinka je uspješno promijenjena.");
        }
        catch (Exception e)
        {
            Logger logger = LogManager.GetLogger("errorLogger");
            logger.Error(e, "");

            if (e.InnerException == null)
            {
                await JsRuntime.ToastrError(e.Message);
            }
            else
            {
                await JsRuntime.ToastrError(e.Message + " Inner exception: " + e.InnerException.Message);
            }
        }
    }
}
